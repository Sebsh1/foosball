// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package tournament is a generated GoMock package.
package tournament

import (
	context "context"
	team "foosball/internal/team"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateTournament mocks base method.
func (m *MockService) CreateTournament(ctx context.Context, teams []*team.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTournament", ctx, teams)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTournament indicates an expected call of CreateTournament.
func (mr *MockServiceMockRecorder) CreateTournament(ctx, teams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTournament", reflect.TypeOf((*MockService)(nil).CreateTournament), ctx, teams)
}

// DeleteTournament mocks base method.
func (m *MockService) DeleteTournament(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTournament", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTournament indicates an expected call of DeleteTournament.
func (mr *MockServiceMockRecorder) DeleteTournament(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTournament", reflect.TypeOf((*MockService)(nil).DeleteTournament), ctx, id)
}

// GetTournament mocks base method.
func (m *MockService) GetTournament(ctx context.Context, id uint) (*Tournament, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTournament", ctx, id)
	ret0, _ := ret[0].(*Tournament)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTournament indicates an expected call of GetTournament.
func (mr *MockServiceMockRecorder) GetTournament(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTournament", reflect.TypeOf((*MockService)(nil).GetTournament), ctx, id)
}

// UpdateTournament mocks base method.
func (m *MockService) UpdateTournament(ctx context.Context, tournament *Tournament) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTournament", ctx, tournament)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTournament indicates an expected call of UpdateTournament.
func (mr *MockServiceMockRecorder) UpdateTournament(ctx, tournament interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTournament", reflect.TypeOf((*MockService)(nil).UpdateTournament), ctx, tournament)
}
