// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package tournament is a generated GoMock package.
package tournament

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateTournament mocks base method.
func (m *MockRepository) CreateTournament(ctx context.Context, tournament *Tournament) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTournament", ctx, tournament)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTournament indicates an expected call of CreateTournament.
func (mr *MockRepositoryMockRecorder) CreateTournament(ctx, tournament interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTournament", reflect.TypeOf((*MockRepository)(nil).CreateTournament), ctx, tournament)
}

// DeleteTournament mocks base method.
func (m *MockRepository) DeleteTournament(ctx context.Context, tournament *Tournament) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTournament", ctx, tournament)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTournament indicates an expected call of DeleteTournament.
func (mr *MockRepositoryMockRecorder) DeleteTournament(ctx, tournament interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTournament", reflect.TypeOf((*MockRepository)(nil).DeleteTournament), ctx, tournament)
}

// GetTournamen mocks base method.
func (m *MockRepository) GetTournamen(ctx context.Context, id uint) (*Tournament, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTournamen", ctx, id)
	ret0, _ := ret[0].(*Tournament)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTournamen indicates an expected call of GetTournamen.
func (mr *MockRepositoryMockRecorder) GetTournamen(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTournamen", reflect.TypeOf((*MockRepository)(nil).GetTournamen), ctx, id)
}

// UpdateTournament mocks base method.
func (m *MockRepository) UpdateTournament(ctx context.Context, tournament *Tournament) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTournament", ctx, tournament)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTournament indicates an expected call of UpdateTournament.
func (mr *MockRepositoryMockRecorder) UpdateTournament(ctx, tournament interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTournament", reflect.TypeOf((*MockRepository)(nil).UpdateTournament), ctx, tournament)
}
