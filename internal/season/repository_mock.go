// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package season is a generated GoMock package.
package season

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateSeason mocks base method.
func (m *MockRepository) CreateSeason(ctx context.Context, season *Season) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSeason", ctx, season)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSeason indicates an expected call of CreateSeason.
func (mr *MockRepositoryMockRecorder) CreateSeason(ctx, season interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSeason", reflect.TypeOf((*MockRepository)(nil).CreateSeason), ctx, season)
}

// DeleteSeason mocks base method.
func (m *MockRepository) DeleteSeason(ctx context.Context, season *Season) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSeason", ctx, season)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSeason indicates an expected call of DeleteSeason.
func (mr *MockRepositoryMockRecorder) DeleteSeason(ctx, season interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeason", reflect.TypeOf((*MockRepository)(nil).DeleteSeason), ctx, season)
}

// GetSeason mocks base method.
func (m *MockRepository) GetSeason(ctx context.Context, id uint) (*Season, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeason", ctx, id)
	ret0, _ := ret[0].(*Season)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeason indicates an expected call of GetSeason.
func (mr *MockRepositoryMockRecorder) GetSeason(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeason", reflect.TypeOf((*MockRepository)(nil).GetSeason), ctx, id)
}

// UpdateSeason mocks base method.
func (m *MockRepository) UpdateSeason(ctx context.Context, season *Season) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSeason", ctx, season)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSeason indicates an expected call of UpdateSeason.
func (mr *MockRepositoryMockRecorder) UpdateSeason(ctx, season interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSeason", reflect.TypeOf((*MockRepository)(nil).UpdateSeason), ctx, season)
}
