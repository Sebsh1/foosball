// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package season is a generated GoMock package.
package season

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateSeason mocks base method.
func (m *MockService) CreateSeason(ctx context.Context, start time.Time, name *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSeason", ctx, start, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSeason indicates an expected call of CreateSeason.
func (mr *MockServiceMockRecorder) CreateSeason(ctx, start, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSeason", reflect.TypeOf((*MockService)(nil).CreateSeason), ctx, start, name)
}

// DeleteSeason mocks base method.
func (m *MockService) DeleteSeason(ctx context.Context, id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSeason", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSeason indicates an expected call of DeleteSeason.
func (mr *MockServiceMockRecorder) DeleteSeason(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeason", reflect.TypeOf((*MockService)(nil).DeleteSeason), ctx, id)
}

// GetSeason mocks base method.
func (m *MockService) GetSeason(ctx context.Context, id uint) (*Season, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeason", ctx, id)
	ret0, _ := ret[0].(*Season)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeason indicates an expected call of GetSeason.
func (mr *MockServiceMockRecorder) GetSeason(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeason", reflect.TypeOf((*MockService)(nil).GetSeason), ctx, id)
}

// UpdateSeason mocks base method.
func (m *MockService) UpdateSeason(ctx context.Context, season *Season) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSeason", ctx, season)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSeason indicates an expected call of UpdateSeason.
func (mr *MockServiceMockRecorder) UpdateSeason(ctx, season interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSeason", reflect.TypeOf((*MockService)(nil).UpdateSeason), ctx, season)
}
